#!/usr/bin/env python3
"""
üèÜ Pre-Presentation Checklist Script
Ensures everything is ready for championship presentation
"""

import os
import sys
import time
import requests
import subprocess
from colorama import Fore, Style, init

init(autoreset=True)

def print_header():
    print(f"{Fore.CYAN}{Style.BRIGHT}")
    print("=" * 60)
    print("üèÜ FINANCEGPT LIVE - PRE-PRESENTATION CHECKLIST")
    print("=" * 60)
    print(f"{Style.RESET_ALL}")

def check_backend():
    """Check if backend is running"""
    print(f"{Fore.YELLOW}üì° Checking Backend Services...")
    try:
        response = requests.get("http://localhost:8001/", timeout=5)
        if response.status_code == 200:
            print(f"{Fore.GREEN}‚úÖ Backend service running on port 8001")
            return True
        else:
            print(f"{Fore.RED}‚ùå Backend responding with error: {response.status_code}")
            return False
    except requests.exceptions.RequestException:
        print(f"{Fore.RED}‚ùå Backend not responding on port 8001")
        return False

def check_frontend():
    """Check if frontend is running"""
    print(f"{Fore.YELLOW}üåê Checking Frontend Service...")
    try:
        response = requests.get("http://localhost:3001/", timeout=5)
        if response.status_code == 200:
            print(f"{Fore.GREEN}‚úÖ Frontend service running on port 3001")
            return True
        else:
            print(f"{Fore.RED}‚ùå Frontend responding with error: {response.status_code}")
            return False
    except requests.exceptions.RequestException:
        print(f"{Fore.RED}‚ùå Frontend not responding on port 3001")
        return False

def check_ml_endpoints():
    """Check ML endpoints"""
    print(f"{Fore.YELLOW}ü§ñ Checking AI/ML Endpoints...")
    endpoints = [
        "/api/ml/predict",
        "/api/ml/portfolio-optimization",
        "/api/ml/market-regime"
    ]
    
    all_working = True
    for endpoint in endpoints:
        try:
            response = requests.get(f"http://localhost:8001{endpoint}", timeout=5)
            if response.status_code == 200:
                print(f"{Fore.GREEN}‚úÖ ML endpoint working: {endpoint}")
            else:
                print(f"{Fore.RED}‚ùå ML endpoint error: {endpoint}")
                all_working = False
        except requests.exceptions.RequestException:
            print(f"{Fore.RED}‚ùå ML endpoint not responding: {endpoint}")
            all_working = False
    
    return all_working

def check_demo_features():
    """Check key demo features"""
    print(f"{Fore.YELLOW}üé¨ Checking Demo Features...")
    
    demo_urls = [
        "http://localhost:3001/trading",
        "http://localhost:3001/portfolio",
        "http://localhost:3001/ai-intelligence"
    ]
    
    all_working = True
    for url in demo_urls:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                feature_name = url.split('/')[-1]
                print(f"{Fore.GREEN}‚úÖ Demo feature accessible: {feature_name}")
            else:
                print(f"{Fore.RED}‚ùå Demo feature error: {url}")
                all_working = False
        except requests.exceptions.RequestException:
            print(f"{Fore.RED}‚ùå Demo feature not accessible: {url}")
            all_working = False
    
    return all_working

def print_demo_script():
    """Print quick demo script reminder"""
    print(f"{Fore.CYAN}{Style.BRIGHT}")
    print("\nüéØ QUICK DEMO SCRIPT REMINDER:")
    print("=" * 40)
    print(f"{Style.RESET_ALL}")
    
    script = [
        "1. Open AI Intelligence ‚Üí Point to live predictions",
        "2. Show confidence scores above 80%", 
        "3. Switch to Trading Terminal ‚Üí Show candlestick charts",
        "4. Point to technical indicators ‚Üí Show buy/sell signals",
        "5. Open Portfolio Analytics ‚Üí Show institutional metrics",
        "6. Highlight VaR, Sharpe ratio, optimization",
        "7. Return to AI Intelligence ‚Üí Show live alerts",
        "8. Point to real-time updates happening live"
    ]
    
    for step in script:
        print(f"{Fore.WHITE}{step}")
    
    print(f"\n{Fore.GREEN}{Style.BRIGHT}üèÜ Remember: Confidence + Eye Contact + Specific Numbers")

def print_final_checklist():
    """Print final pre-presentation checklist"""
    print(f"\n{Fore.MAGENTA}{Style.BRIGHT}")
    print("üìã FINAL PRE-PRESENTATION CHECKLIST:")
    print("=" * 40)
    print(f"{Style.RESET_ALL}")
    
    checklist = [
        "‚úÖ Backend services running (port 8001)",
        "‚úÖ Frontend accessible (port 3001)", 
        "‚úÖ ML endpoints responding",
        "‚úÖ Demo features working",
        "‚úÖ Backup screenshots ready",
        "‚úÖ Presentation slides prepared",
        "‚úÖ Demo script memorized",
        "‚úÖ Technical specs ready to quote",
        "‚úÖ Business metrics memorized",
        "‚úÖ Closing statement practiced"
    ]
    
    for item in checklist:
        print(f"{Fore.GREEN}{item}")

def main():
    print_header()
    
    # Run all checks
    backend_ok = check_backend()
    frontend_ok = check_frontend()
    ml_ok = check_ml_endpoints()
    demo_ok = check_demo_features()
    
    print(f"\n{Fore.CYAN}{Style.BRIGHT}")
    print("üìä SYSTEM STATUS SUMMARY:")
    print("=" * 30)
    print(f"{Style.RESET_ALL}")
    
    if all([backend_ok, frontend_ok, ml_ok, demo_ok]):
        print(f"{Fore.GREEN}{Style.BRIGHT}üéâ ALL SYSTEMS GO! READY FOR CHAMPIONSHIP! üèÜ")
        print(f"{Fore.GREEN}‚úÖ Backend: Operational")
        print(f"{Fore.GREEN}‚úÖ Frontend: Operational")
        print(f"{Fore.GREEN}‚úÖ ML Engine: Operational")
        print(f"{Fore.GREEN}‚úÖ Demo Features: Operational")
        
        print_demo_script()
        print_final_checklist()
        
        print(f"\n{Fore.YELLOW}{Style.BRIGHT}")
        print("üöÄ FINAL MOTIVATION:")
        print("You've built something extraordinary!")
        print("This is championship-level work!")
        print("Go win that hackathon! üèÜ")
        
    else:
        print(f"{Fore.RED}{Style.BRIGHT}‚ö†Ô∏è  SYSTEM ISSUES DETECTED!")
        print(f"{Fore.RED}Please fix the following before presenting:")
        
        if not backend_ok:
            print(f"{Fore.RED}‚ùå Backend needs to be started")
        if not frontend_ok:
            print(f"{Fore.RED}‚ùå Frontend needs to be started")
        if not ml_ok:
            print(f"{Fore.RED}‚ùå ML endpoints need attention")
        if not demo_ok:
            print(f"{Fore.RED}‚ùå Demo features need fixing")
            
        print(f"\n{Fore.YELLOW}üí° Quick Fix Commands:")
        print("Backend: cd simple_backend && python simple_backend.py")
        print("Frontend: cd frontend && npm run dev")

if __name__ == "__main__":
    main()
